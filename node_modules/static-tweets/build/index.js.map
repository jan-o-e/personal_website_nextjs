{"version":3,"file":"index.js","sources":["../src/twitter/api.ts","../src/twitter/embed/tweet-html.ts","../src/twitter/tweet-html.ts","../src/markdown/markdownToAst.ts","../src/twitter/getTweetHtml.ts","../node_modules/unist-util-is/index.js","../node_modules/unist-util-visit-parents/color.js","../node_modules/unist-util-visit-parents/index.js","../node_modules/unist-util-visit/index.js","../../../node_modules/mdast-util-to-string/index.js","../src/markdown/rehype-tweet.ts","../src/markdown/rehype-minify.ts","../../../node_modules/hast-util-sanitize/lib/schema.js","../src/markdown/schema.ts","../src/markdown/htmlToAst.ts","../src/fetchTweetAst.ts"],"sourcesContent":["import https from 'node:https'\nimport fetch from 'node-fetch'\n\nconst API_URL = 'https://api.twitter.com'\nconst SYNDICATION_URL = 'https://syndication.twitter.com'\nconst agent = new https.Agent({ maxCachedSessions: 0 })\n\nfunction twitterLabsEnabled(expansions) {\n  if (process.env.TWITTER_LABS_ENABLED !== 'true') return false\n  if (!expansions) return true\n\n  const exp = process.env.TWITTER_LABS_EXPANSIONS || ''\n\n  return exp.includes(expansions)\n}\n\nasync function get(url: string, opts?: any): Promise<any> {\n  // twitter's syndication API has some weird bugs with TLS, so we're explicitly\n  // disabling TLS session reuse as a workaround\n  // @see https://github.com/transitive-bullshit/react-static-tweets/issues/43\n  const res = await fetch(url, {\n    ...opts,\n    agent\n  })\n\n  if (res.ok) {\n    return res.json()\n  }\n\n  if (res.status === 404) {\n    return {}\n  }\n\n  throw new Error(`Twitter fetch error ${res.status} ${res.statusText}`)\n}\n\nexport async function fetchTweetsHtml(ids) {\n  return get(`${SYNDICATION_URL}/tweets.json?ids=${ids}`)\n}\n\nexport async function fetchTweetHtml(id) {\n  const html = await fetchTweetsHtml(id)\n  return html[id]\n}\n\nexport async function fetchUserStatus(tweetId) {\n  // If there isn't an API token don't do anything, this is only required for videos.\n  if (!process.env.TWITTER_ACCESS_TOKEN) return null\n\n  return get(\n    `${API_URL}/1.1/statuses/show/${tweetId}.json?include_entities=true&tweet_mode=extended`,\n    {\n      headers: {\n        authorization: `Bearer ${process.env.TWITTER_ACCESS_TOKEN}`\n      }\n    }\n  )\n}\n\nexport async function fetchTweetWithPoll(tweetId) {\n  const expansions = 'attachments.poll_ids'\n\n  // If there isn't an API token or Twitter Labs is not enabled, don't do anything,\n  // this is only required for Polls.\n  if (!process.env.TWITTER_ACCESS_TOKEN || !twitterLabsEnabled(expansions))\n    return null\n\n  return get(\n    `${API_URL}/labs/1/tweets?format=compact&expansions=${expansions}&ids=${tweetId}`,\n    {\n      headers: {\n        authorization: `Bearer ${process.env.TWITTER_ACCESS_TOKEN}`\n      }\n    }\n  )\n}\n\nexport async function getEmbeddedTweetHtml(url) {\n  return get(`https://publish.twitter.com/oembed?url=${url}`)\n}\n","import cheerio from 'cheerio'\n\nfunction getTweetContent($) {\n  const container = $('.EmbeddedTweet-tweetContainer')\n\n  if (!container.length) return\n\n  const meta: any = {}\n  const content: any = { meta }\n\n  // This is the blockquote with the tweet\n  const subject = container.find('[data-scribe=\"section:subject\"]')\n\n  // Tweet header with the author info\n  const header = subject.children('.Tweet-header')\n  const avatar = header.find('[data-scribe=\"element:avatar\"]')\n  const author = header.find('[data-scribe=\"component:author\"]')\n  const name = author.find('[data-scribe=\"element:name\"]')\n  const screenName = author.find('[data-scribe=\"element:screen_name\"]')\n\n  // Tweet body\n  const tweet = subject.children('[data-scribe=\"component:tweet\"]')\n  const tweetContent = tweet.children('p')\n  const card = tweet.children('.Tweet-card')\n  const tweetInfo = tweet.children('.TweetInfo')\n  const fullTimestamp = tweetInfo.find('[data-scribe=\"element:full_timestamp\"]')\n  const heartCount = tweetInfo.find('[data-scribe=\"element:heart_count\"]')\n\n  // Tweet footer\n  const callToAction = container.children(\n    '[data-scribe=\"section:cta component:news\"]'\n  )\n  const profileText = callToAction.children(\n    '[data-scribe=\"element:profile_text\"]'\n  )\n  const conversationText = callToAction.children(\n    '[data-scribe=\"element:conversation_text\"]'\n  )\n\n  let quotedTweet\n  let mediaHtml\n\n  meta.id = subject.attr('data-tweet-id')\n  meta.avatar = {\n    normal: avatar.attr('data-src-1x')\n  }\n  meta.name = name.text()\n  meta.username = screenName.text().substring(1) // Omit the initial @\n  meta.createdAt = new Date(fullTimestamp.attr('data-datetime')).getTime()\n  meta.heartCount = heartCount.text()\n  meta.ctaType = profileText.length ? 'profile' : 'conversation'\n  const tweetUrl = `https://twitter.com/${meta.username}/status/${meta.id}`\n\n  if (conversationText.length) {\n    // Get the formatted count and skip the rest\n    meta.ctaCount = conversationText.text().match(/^[^\\s]+/)[0]\n  }\n\n  // If some text ends without a trailing space, it's missing a <br>\n  tweetContent.contents().each(function () {\n    const el = $(this)\n    const type = el[0].type\n\n    if (type !== 'text') return\n\n    const text = el.text()\n\n    if (text.length && text.trim() === '') {\n      if (el.next().children().length) {\n        el.after($('<br>'))\n      }\n    } else if (\n      !/\\s$/.test(el.text()) &&\n      el.next().children().length &&\n      !/^[#@]/.test(el.next().text())\n    ) {\n      el.after($('<br>'))\n    }\n  })\n\n  card.children().each(function () {\n    const props = this.attribs\n    const scribe = props['data-scribe']\n    const el = $(this)\n\n    if (scribe === 'section:quote') {\n      const tweetCard = el.children('a')\n      const id = tweetCard.attr('data-tweet-id')\n      const url = tweetCard.attr('href')\n\n      quotedTweet = { id, url }\n      return\n    }\n\n    const media = $('<div>')\n\n    if (scribe === 'component:card') {\n      const photo = el.children('[data-scribe=\"element:photo\"]')\n      const photoGrid = el.children('[data-scribe=\"element:photo_grid\"]')\n      const photos = photo.length ? photo : photoGrid\n\n      if (photos.length) {\n        const images = photos.find('img')\n\n        images.each(function () {\n          const img = $(this)\n          const alt = img.attr('alt')\n          const url = img.attr('data-image')\n          const format = img.attr('data-image-format')\n          const height = img.attr('height')\n          const width = img.attr('width')\n\n          this.attribs = {\n            'data-type': 'media-image',\n            'data-url': tweetUrl,\n            src: `${url}?format=${format}`,\n            height,\n            width\n          }\n          if (alt) {\n            this.attribs.alt = alt\n          }\n          // Move the media img to a new container\n          media.append(img)\n        })\n        media.attr('data-type', `image-container ${images.length}`)\n        mediaHtml = $('<div>').append(media).html()\n      }\n    }\n  })\n\n  tweetContent.children('img').each(function () {\n    const props = this.attribs\n\n    // Handle emojis inside the text\n    if (props.class?.includes('Emoji--forText')) {\n      this.attribs = {\n        'data-type': 'emoji-for-text',\n        src: props.src,\n        alt: props.alt\n      }\n      return\n    }\n\n    console.error(\n      'An image with the following props is not being handled:',\n      props\n    )\n  })\n\n  tweetContent.children('a').each(function () {\n    const props = this.attribs\n    const scribe = props['data-scribe']\n    const el = $(this)\n    const asTwitterLink = (type) => {\n      this.attribs = {\n        'data-type': type,\n        href: props.href\n      }\n      // Replace custom tags inside the anchor with text\n      el.text(el.text())\n    }\n\n    // @mention\n    if (scribe === 'element:mention') {\n      return asTwitterLink('mention')\n    }\n\n    // #hashtag\n    if (scribe === 'element:hashtag') {\n      // A hashtag may be a $cashtag too\n      const type =\n        props['data-query-source'] === 'cashtag_click' ? 'cashtag' : 'hashtag'\n      return asTwitterLink(type)\n    }\n\n    if (scribe === 'element:url') {\n      const url = props['data-expanded-url']\n      // const quotedTweetId = props['data-tweet-id']\n\n      // Remove link to quoted tweet to leave the card only\n      // if (quotedTweetId && quotedTweetId === quotedTweet?.id) {\n      //   el.remove();\n      //   return;\n      // }\n\n      // Handle normal links\n      const text = { type: 'text', data: url }\n      // Replace the link with plain text and markdown will take care of it\n      el.replaceWith(text)\n    }\n  })\n\n  content.html = tweetContent.html()\n\n  if (quotedTweet) content.quotedTweet = quotedTweet\n  if (mediaHtml) content.mediaHtml = mediaHtml\n\n  return content\n}\n\nexport function getTweetData(html) {\n  const $ = cheerio.load(html, {\n    decodeEntities: false,\n    xmlMode: false\n  })\n  const tweetContent = getTweetContent($)\n\n  return tweetContent\n}\n","import path from 'path'\nimport cheerio from 'cheerio'\nimport { URL } from 'url'\n\nconst TWEET_VIDEO_URL = 'https://video.twimg.com/tweet_video'\n\n// Could we use rehype directly and remove cheerio?\nfunction getTweetContent($, tweet, isMainTweet = true) {\n  if (!tweet.length) return\n\n  const meta: any = {}\n  const content: any = { meta }\n  const tweetContent = tweet.children('.js-tweet-text-container').children('p')\n  const actions = tweet\n    .children('.stream-item-footer')\n    .children('.ProfileTweet-actionCountList')\n    .children()\n  const hasCard =\n    tweet.children('.js-tweet-details-fixer').children('.card2').length > 0\n\n  let quotedTweet\n  let mediaHtml\n  let hasVideo = false\n\n  // Add the user avatar and date to the tweet only if it's the main tweet\n  if (isMainTweet) {\n    const avatar = tweet.find('.account-group').children('.avatar')\n    const time = tweet.find('a.tweet-timestamp').children('span')\n\n    meta.avatar = { bigger: avatar.attr('src') }\n    meta.createdAt = Number(time.attr('data-time-ms'))\n  }\n\n  tweetContent.children('img').each(function () {\n    const props = this.attribs\n\n    // Handle emojis inside the text\n    if (props.class && props.class.includes('Emoji--forText')) {\n      this.attribs = {\n        'data-type': 'emoji-for-text',\n        src: props.src,\n        alt: props.alt\n      }\n      return\n    }\n\n    console.error(\n      'An image with the following props is not being handled:',\n      props\n    )\n  })\n\n  tweetContent.children('a').each(function () {\n    const props = this.attribs\n    const el = $(this)\n\n    if (props['data-expanded-url']) {\n      const url = props['data-expanded-url']\n      const quotedTweetPath = tweet\n        .children('.QuoteTweet')\n        .find('.QuoteTweet-link')\n        .attr('href')\n\n      // Embedded Tweet\n      if (quotedTweetPath && url.endsWith(quotedTweetPath)) {\n        quotedTweet = { url }\n        el.remove()\n        return\n      }\n\n      // If Twitter is hiding the link, it's because it's adding a card with a preview\n      const isLinkPreview = props.class && props.class.includes('u-hidden')\n\n      if (isLinkPreview) {\n        // In the case of a preview we only add a line break between the link and the paragraph.\n        // TODO: Add the preview HTML and remove the link\n        el.before('<br>')\n      }\n\n      // Handle normal links\n      const text = { type: 'text', data: url }\n      // Replace the link with plain text and markdown will take care of it\n      el.replaceWith(text)\n\n      return\n    }\n\n    // Embedded media\n    if (props['data-pre-embedded'] === 'true') {\n      const adaptiveMedia = tweet\n        .children('.AdaptiveMediaOuterContainer')\n        .children('.AdaptiveMedia')\n      const isVideo = adaptiveMedia.hasClass('is-video')\n      const media = $('<div>')\n\n      // Videos and gifs\n      if (isVideo) {\n        const img = adaptiveMedia\n          .find('.PlayableMedia-player')\n          .css('background-image')\n        const url = new URL(img.slice(4, -1).replace(/['\"]/g, ''))\n        const fileName = path.basename(url.pathname)\n        const ext = path.extname(fileName)\n        const videoUrl = `${TWEET_VIDEO_URL}/${fileName.replace(ext, '.mp4')}`\n\n        // Gifs\n        if (url.pathname.startsWith('/tweet_video_thumb')) {\n          const video = $(\n            `<video poster=\"${url.href}\" controls playsinline autoplay muted loop>`\n          ).append(`<source src=\"${videoUrl}\" type=\"video/mp4\">`)\n          media.attr('data-type', 'gif-container').append(video)\n        } else {\n          // Custom videos require a call to the Twitter API to get the URL of the video\n          hasVideo = true\n          media.attr('data-type', 'video-container')\n        }\n      } else {\n        const images = adaptiveMedia.find('img')\n\n        images.each(function () {\n          const img = $(this)\n          const src = img.attr('src')\n          const alt = img.attr('alt')\n\n          this.attribs = { 'data-type': 'media-image', src }\n          if (alt) {\n            this.attribs.alt = alt\n          }\n          // Move the media img to a new container\n          media.append(img)\n        })\n        media.attr('data-type', `image-container ${images.length}`)\n      }\n\n      mediaHtml = $('<div>').append(media).html()\n\n      el.remove()\n      return\n    }\n\n    const asTwitterLink = (type) => {\n      this.attribs = {\n        'data-type': type,\n        href: props.href\n      }\n      // Replace custom tags inside the anchor with text\n      el.text(el.text())\n    }\n\n    // @mention\n    if (props['data-mentioned-user-id']) {\n      return asTwitterLink('mention')\n    }\n\n    // #hashtag\n    if (props['data-query-source'] === 'hashtag_click') {\n      return asTwitterLink('hashtag')\n    }\n\n    // $cashtag\n    if (props['data-query-source'] === 'cashtag_click') {\n      return asTwitterLink('cashtag')\n    }\n\n    console.error(\n      'An anchor with the following props is not being handled:',\n      props\n    )\n  })\n\n  actions.each(function () {\n    const el = $(this)\n    const className = this.attribs.class\n    const is = (name) => className.includes(`ProfileTweet-action--${name}`)\n    const count = Number(el.children('span').attr('data-tweet-stat-count'))\n\n    if (Number.isNaN(count)) return\n\n    if (is('reply')) {\n      meta.replies = count\n    } else if (is('retweet')) {\n      meta.retweets = count\n    } else if (is('favorite')) {\n      meta.likes = count\n    }\n  })\n\n  content.html = tweetContent.html()\n\n  if (quotedTweet) content.quotedTweet = quotedTweet\n  if (mediaHtml) content.mediaHtml = mediaHtml\n  if (hasVideo) content.hasVideo = true\n  // If a card is detected, it's a Poll\n  if (hasCard) content.hasPoll = true\n\n  return content\n}\n\nfunction addTweetMetadata(data, tweet) {\n  Object.assign(data.meta, {\n    id: tweet.attr('data-tweet-id'),\n    username: tweet.attr('data-screen-name'),\n    name: tweet.attr('data-name')\n  })\n  return data\n}\n\nexport function getVideo(html, { poster, url }) {\n  const $ = cheerio.load(html, {\n    decodeEntities: false,\n    xmlMode: false\n  })\n  const container = $('[data-type=video-container]')\n  const video = $(\n    `<video poster=\"${poster}\" controls preload=\"none\" playsinline>`\n  ).append(`<source src=\"${url}\" type=\"video/mp4\">`)\n\n  return $('<div>').append(container.append(video)).html()\n}\n\nexport function getTweetData(html, { thread = null } = {}) {\n  const $ = cheerio.load(html, {\n    decodeEntities: false,\n    xmlMode: false\n  })\n  const tweet = $('.permalink-tweet-container > .permalink-tweet')\n  const tweetContent = tweet.length && getTweetContent($, tweet, true)\n\n  if (!tweetContent) return null\n\n  tweetContent.meta.mainTweet = true\n\n  const selfThread = [addTweetMetadata(tweetContent, tweet)]\n\n  if (!thread) return selfThread\n\n  const replies = $('#stream-items-id')\n\n  replies\n    .children('.ThreadedConversation--selfThread')\n    .children('ol')\n    .children()\n    .each(function () {\n      const selfTweet = $(this).children('li').children('.tweet')\n      const selfTweetContent = getTweetContent(\n        $,\n        selfTweet.children('.content')\n      )\n\n      if (selfTweetContent) {\n        selfThread.push(addTweetMetadata(selfTweetContent, selfTweet))\n      }\n    })\n\n  return selfThread\n}\n","import unified from 'unified'\nimport markdown from 'remark-parse'\nimport remarkToRehype from 'remark-rehype'\nimport raw from 'rehype-raw'\nimport prism from '@mapbox/rehype-prism'\n\nconst handlers = {\n  // Add a className to inlineCode so we can differentiate between it and code fragments\n  inlineCode(_: any, node) {\n    return {\n      ...node,\n      type: 'element',\n      tagName: 'code',\n      properties: { className: 'inline' },\n      children: [\n        {\n          type: 'text',\n          value: node.value\n        }\n      ]\n    }\n  }\n}\n\nfunction toAst() {\n  this.Compiler = (tree) => tree\n}\n\n// Create the processor, the order of the plugins is important\nconst processor = unified()\n  .use(markdown)\n  .use(remarkToRehype, { handlers, allowDangerousHtml: true })\n  // Add custom HTML found in the tweet to the AST\n  .use(raw)\n  // Add syntax highlighting\n  .use(prism)\n  .use(toAst)\n\nexport default async function markdownToAst(md) {\n  try {\n    const file = await processor.process(md)\n    return file.result\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(`Markdown to AST error: ${error}`)\n    throw error\n  }\n}\n","import { getVideo } from './tweet-html'\nimport {\n  fetchUserStatus,\n  getEmbeddedTweetHtml,\n  fetchTweetWithPoll\n} from './api'\nimport { fetchTweetAst } from '../fetchTweetAst'\nimport markdownToAst from '../markdown/markdownToAst'\n\nfunction getVideoData(userStatus) {\n  const video = userStatus.extended_entities.media[0]\n  const poster = video.media_url_https\n  // Find the first mp4 video in the array, if the results are always properly sorted, then\n  // it should always be the mp4 video with the lowest bitrate\n  const mp4Video = video.video_info.variants.find(\n    (v) => v.content_type === 'video/mp4'\n  )\n\n  if (!mp4Video) return\n\n  return { poster, ...mp4Video }\n}\n\nfunction getPollData(tweet) {\n  const polls = tweet.includes && tweet.includes.polls\n  return polls && polls[0]\n}\n\nasync function getMediaHtml(tweet) {\n  let media = tweet.mediaHtml\n\n  if (tweet.hasVideo) {\n    const userStatus = await fetchUserStatus(tweet.meta.id)\n    const video = userStatus && getVideoData(userStatus)\n\n    media = video ? getVideo(media, video) : null\n  }\n\n  return media\n}\n\nasync function getQuotedTweetHtml({ quotedTweet }, context) {\n  if (!quotedTweet) return\n\n  if (process.env.NEXT_PUBLIC_TWITTER_LOAD_WIDGETS === 'true') {\n    const data = await getEmbeddedTweetHtml(quotedTweet.url)\n    return data?.html\n  } else {\n    const ast = await fetchTweetAst(quotedTweet.id)\n    // The AST of embedded tweets is always sent as data\n    return ast && `<blockquote data-id=\"${context.add({ ast })}\"></blockquote>`\n  }\n}\n\nasync function getPollHtml(tweet, context) {\n  if (!tweet.hasPoll) return null\n\n  const tweetData = await fetchTweetWithPoll(tweet.meta.id)\n  const poll = tweetData && getPollData(tweetData)\n\n  if (poll) {\n    const meta = {\n      type: 'poll-container',\n      endsAt: poll.end_datetime,\n      duration: poll.duration_minutes,\n      status: poll.voting_status,\n      options: poll.options\n    }\n\n    return `<div data-id=\"${context.add(meta)}\"></div>`\n  }\n\n  return null\n}\n\nexport default async function getTweetHtml(tweet, context) {\n  const meta = { ...tweet.meta, type: 'tweet' }\n  const md: any = await markdownToAst(tweet.html)\n\n  const html = [\n    // md.children is the markdown content, which is later added as children to the container\n    `<div data-id=\"${context.add(meta, md.children)}\">`,\n    (await getMediaHtml(tweet)) || '',\n    (await getQuotedTweetHtml(tweet, context)) || '',\n    (await getPollHtml(tweet, context)) || '',\n    `</div>`\n  ].join('')\n\n  return html\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\nexport const is =\n  /**\n   * Check if a node passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n   *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number|null|undefined} [index] Position of `node` in `parent`\n     * @param {Parent|null|undefined} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\nexport const convert =\n  /**\n   * @type {(\n   *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(...parameters) {\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call(this, ...parameters))\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {CONTINUE|SKIP|EXIT} Action Union of the action types\n * @typedef {number} Index Move to the sibling at index next (after node itself is completely traversed). Useful if mutating the tree, such as removing the node the visitor is currently on, or any of its previous siblings (or next siblings, in case of reverse) Results less than 0 or greater than or equal to children.length stop traversing the parent\n * @typedef {[(Action|null|undefined|void)?, (Index|null|undefined)?]} ActionTuple List with one or two values, the first an action, the second an index.\n * @typedef {null|undefined|Action|Index|ActionTuple|void} VisitorResult Any value that can be returned from a visitor\n */\n\n/**\n * Invoked when a node (matching test, if given) is found.\n * Visitors are free to transform node.\n * They can also transform the parent of node (the last of ancestors).\n * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.\n * If adding or removing previous siblings (or next siblings, in case of reverse) of node,\n * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.\n * Adding or removing next siblings of node (or previous siblings, in case of reverse)\n * is handled as expected without needing to return a new index.\n * Removing the children property of an ancestor still results in them being traversed.\n *\n * @template {Node} V\n * @callback Visitor\n * @param {V} node Found node\n * @param {Array.<Parent>} ancestors Ancestors of node\n * @returns {VisitorResult}\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &\n   *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &\n   *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * Visit children of tree which pass a test\n     *\n     * @param {Node} tree Abstract syntax tree to walk\n     * @param {Test} test test Test node\n     * @param {Visitor<Node>} visitor Function to run for each node\n     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-ignore no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      var is = convert(test)\n      var step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array.<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Object.<string, unknown>} */\n        var value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string} */\n        var name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          var result = []\n          /** @type {ActionTuple} */\n          var subresult\n          /** @type {number} */\n          var offset\n          /** @type {Array.<Parent>} */\n          var grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          if (node.children && result[0] !== SKIP) {\n            // @ts-ignore looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-ignore looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-ignore looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Invoked when a node (matching test, if given) is found.\n * Visitors are free to transform node.\n * They can also transform the parent of node (the last of ancestors).\n * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.\n * If adding or removing previous siblings (or next siblings, in case of reverse) of node,\n * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.\n * Adding or removing next siblings of node (or previous siblings, in case of reverse)\n * is handled as expected without needing to return a new index.\n * Removing the children property of an ancestor still results in them being traversed.\n *\n * @template {Node} V\n * @callback Visitor\n * @param {V} node Found node\n * @param {number|null} index Position of `node` in `parent`\n * @param {Parent|null} parent Parent of `node`\n * @returns {VisitorResult}\n */\n\nimport {visitParents, CONTINUE, SKIP, EXIT} from 'unist-util-visit-parents'\n\nexport {CONTINUE, SKIP, EXIT}\n\nexport const visit =\n  /**\n   * @type {(\n   *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &\n   *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &\n   *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * Visit children of tree which pass a test\n     *\n     * @param {Node} tree Abstract syntax tree to walk\n     * @param {Test} test test Test node\n     * @param {Visitor<Node>} visitor Function to run for each node\n     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array.<Parent>} parents\n       */\n      function overload(node, parents) {\n        var parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n","/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n","import { resolve } from 'url'\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'mdast-util-to-string'\n\nconst TWITTER_URL = 'https://twitter.com'\nconst ABSOLUTE_URL = /^https?:\\/\\/|^\\/\\//i\nconst HEADINGS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']\n\nfunction visitAnchor(node) {\n  if (!node.properties) return\n\n  const { href } = node.properties\n\n  if (!href) return\n\n  const isAbsoluteUrl = ABSOLUTE_URL.test(href)\n\n  if (!isAbsoluteUrl) {\n    node.properties.href = resolve(TWITTER_URL, href)\n  }\n}\n\nexport default function rehypeTweet(context) {\n  // Nodes may have custom data required by the UI\n  function visitData(node) {\n    const ctx = context.get(node.properties.dataId)\n\n    if (ctx?.data) node.data = ctx.data\n\n    // Add markdown content to the tweet container\n    if (ctx?.nodes) {\n      node.children.unshift(...ctx.nodes)\n    }\n\n    delete node.properties.dataId\n  }\n\n  function visitHeading(node) {\n    const text = toString(node)\n\n    if (!text) return\n\n    const id = context.slugger.slug(text)\n\n    node.data = { id }\n  }\n\n  return function transformer(tree) {\n    visit(tree, (node: any) => node.properties?.dataId, visitData)\n    visit(tree, (node: any) => node.tagName === 'a', visitAnchor)\n    visit(tree, (node: any) => HEADINGS.includes(node.tagName), visitHeading)\n  }\n}\n","function minifyAst(ast) {\n  if (Array.isArray(ast)) {\n    return ast.reduce((nodes, node) => {\n      const n = minifyAst(node)\n      // Empty new lines aren't required\n      const isNoise = n === '\\n' && nodes[nodes.length - 1]?.tag !== 'span'\n\n      if (!isNoise) nodes.push(n)\n\n      return nodes\n    }, [])\n  }\n  // Handle the root ast\n  if (!ast.tagName && ast.children) {\n    return minifyAst(ast.children)\n  }\n  if (ast.type === 'text') {\n    return ast.value\n  }\n  if (ast.type === 'element') {\n    const node: any = { tag: ast.tagName }\n    const children = ast.children?.length ? minifyAst(ast.children) : []\n\n    if (ast.properties && Object.keys(ast.properties).length) {\n      node.props = ast.properties\n    }\n    if (ast.data) {\n      node.data = ast.data\n    }\n    if (children.length) {\n      node.nodes = children\n    }\n\n    return node\n  }\n\n  throw new Error(\n    `Unable to handle the following AST: ${JSON.stringify(ast, null, 2)}`\n  )\n}\n\nfunction rehypeMinify() {\n  this.Compiler = (tree) => minifyAst(tree)\n}\n\nexport default rehypeMinify\n","/** @type {import('./index.js').Schema} */\nexport const defaultSchema = {\n  strip: ['script'],\n  clobberPrefix: 'user-content-',\n  clobber: ['name', 'id'],\n  ancestors: {\n    tbody: ['table'],\n    tfoot: ['table'],\n    thead: ['table'],\n    td: ['table'],\n    th: ['table'],\n    tr: ['table']\n  },\n  protocols: {\n    href: ['http', 'https', 'mailto', 'xmpp', 'irc', 'ircs'],\n    cite: ['http', 'https'],\n    src: ['http', 'https'],\n    longDesc: ['http', 'https']\n  },\n  tagNames: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'br',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'a',\n    'pre',\n    'code',\n    'img',\n    'tt',\n    'div',\n    'ins',\n    'del',\n    'sup',\n    'sub',\n    'p',\n    'ol',\n    'ul',\n    'table',\n    'thead',\n    'tbody',\n    'tfoot',\n    'blockquote',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'var',\n    'hr',\n    'ruby',\n    'rt',\n    'rp',\n    'li',\n    'tr',\n    'td',\n    'th',\n    's',\n    'strike',\n    'summary',\n    'details',\n    'caption',\n    'figure',\n    'figcaption',\n    'abbr',\n    'bdo',\n    'cite',\n    'dfn',\n    'mark',\n    'small',\n    'span',\n    'time',\n    'wbr',\n    'input'\n  ],\n  attributes: {\n    a: ['href'],\n    img: ['src', 'longDesc'],\n    input: [\n      ['type', 'checkbox'],\n      ['disabled', true]\n    ],\n    li: [['className', 'task-list-item']],\n    div: ['itemScope', 'itemType'],\n    blockquote: ['cite'],\n    del: ['cite'],\n    ins: ['cite'],\n    q: ['cite'],\n    '*': [\n      'abbr',\n      'accept',\n      'acceptCharset',\n      'accessKey',\n      'action',\n      'align',\n      'alt',\n      'ariaDescribedBy',\n      'ariaHidden',\n      'ariaLabel',\n      'ariaLabelledBy',\n      'axis',\n      'border',\n      'cellPadding',\n      'cellSpacing',\n      'char',\n      'charOff',\n      'charSet',\n      'checked',\n      'clear',\n      'cols',\n      'colSpan',\n      'color',\n      'compact',\n      'coords',\n      'dateTime',\n      'dir',\n      'disabled',\n      'encType',\n      'htmlFor',\n      'frame',\n      'headers',\n      'height',\n      'hrefLang',\n      'hSpace',\n      'isMap',\n      'id',\n      'label',\n      'lang',\n      'maxLength',\n      'media',\n      'method',\n      'multiple',\n      'name',\n      'noHref',\n      'noShade',\n      'noWrap',\n      'open',\n      'prompt',\n      'readOnly',\n      'rel',\n      'rev',\n      'rows',\n      'rowSpan',\n      'rules',\n      'scope',\n      'selected',\n      'shape',\n      'size',\n      'span',\n      'start',\n      'summary',\n      'tabIndex',\n      'target',\n      'title',\n      'type',\n      'useMap',\n      'vAlign',\n      'value',\n      'vSpace',\n      'width',\n      'itemProp'\n    ]\n  },\n  required: {\n    input: {\n      type: 'checkbox',\n      disabled: true\n    }\n  }\n}\n","import { defaultSchema, Schema } from 'hast-util-sanitize'\n\nconst githubSchema: Schema = defaultSchema\n\ngithubSchema.tagNames.push('video', 'source')\n\n// Allow className for all elements\ngithubSchema.attributes['*'].push('className')\n\n// Allow specific attributes that are required for the page to render properly\ngithubSchema.attributes.div = ['dataType', 'dataId']\ngithubSchema.attributes.blockquote = ['dataId']\ngithubSchema.attributes.img = ['dataType', 'src', 'height', 'width', 'dataUrl']\ngithubSchema.attributes.video = [\n  'poster',\n  'controls',\n  'preload',\n  'playsInline',\n  'autoPlay',\n  'muted',\n  'loop'\n]\ngithubSchema.attributes.source = ['src']\n\nexport default githubSchema\n","import unified from 'unified'\nimport parse from 'rehype-parse'\nimport sanitize from 'rehype-sanitize'\nimport tweet from './rehype-tweet'\nimport minify from './rehype-minify'\nimport schema from './schema'\n\n// Create the processor, the order of the plugins is important\nconst getProcessor = unified()\n  .use(parse)\n  // Sanitize the HTML\n  .use<[typeof schema]>(sanitize, schema)\n  .use(minify)\n  .freeze()\n\nexport default async function htmlToAst(html, context) {\n  try {\n    const processor = getProcessor().use(tweet, context)\n    const file = await processor.process(html)\n    return file.result\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(`HTML to AST error: ${error}`)\n    throw error\n  }\n}\n","import GithubSlugger from 'github-slugger'\nimport { fetchTweetHtml } from './twitter/api'\nimport { getTweetData } from './twitter/embed/tweet-html'\nimport getTweetHtml from './twitter/getTweetHtml'\nimport htmlToAst from './markdown/htmlToAst'\n\nclass Context {\n  slugger = new GithubSlugger()\n  map = []\n\n  get(id) {\n    return this.map[Number(id)]\n  }\n\n  add(data, nodes) {\n    return this.map.push({ data, nodes }) - 1\n  }\n}\n\nexport async function fetchTweetAst(tweetId: string): Promise<any> {\n  const tweetHtml = await fetchTweetHtml(tweetId)\n  const tweet = tweetHtml && getTweetData(tweetHtml)\n\n  if (!tweet) return null\n\n  const context = new Context()\n  const html = await getTweetHtml(tweet, context)\n  const ast = await htmlToAst(html, context)\n\n  return ast\n}\n"],"names":["API_URL","SYNDICATION_URL","agent","https","Agent","maxCachedSessions","twitterLabsEnabled","expansions","process","env","TWITTER_LABS_ENABLED","exp","TWITTER_LABS_EXPANSIONS","includes","get","url","opts","res","fetch","ok","json","status","Error","statusText","fetchTweetsHtml","ids","fetchTweetHtml","id","html","fetchUserStatus","tweetId","TWITTER_ACCESS_TOKEN","headers","authorization","fetchTweetWithPoll","getEmbeddedTweetHtml","getTweetContent","$","container","length","meta","content","subject","find","header","children","avatar","author","name","screenName","tweet","tweetContent","card","tweetInfo","fullTimestamp","heartCount","callToAction","profileText","conversationText","quotedTweet","mediaHtml","attr","normal","text","username","substring","createdAt","Date","getTime","ctaType","tweetUrl","ctaCount","match","contents","each","el","type","trim","next","after","test","props","attribs","scribe","tweetCard","media","photo","photoGrid","photos","images","img","alt","format","height","width","src","append","class","console","error","asTwitterLink","href","data","replaceWith","getTweetData","cheerio","load","decodeEntities","xmlMode","getVideo","poster","video","handlers","inlineCode","_","node","tagName","properties","className","value","toAst","Compiler","tree","processor","unified","use","markdown","remarkToRehype","allowDangerousHtml","raw","prism","markdownToAst","md","file","result","getVideoData","userStatus","extended_entities","media_url_https","mp4Video","video_info","variants","v","content_type","getPollData","polls","getMediaHtml","hasVideo","getQuotedTweetHtml","context","NEXT_PUBLIC_TWITTER_LOAD_WIDGETS","ast","fetchTweetAst","add","getPollHtml","hasPoll","tweetData","poll","endsAt","end_datetime","duration","duration_minutes","voting_status","options","getTweetHtml","join","TWITTER_URL","ABSOLUTE_URL","HEADINGS","visitAnchor","isAbsoluteUrl","resolve","rehypeTweet","visitData","ctx","dataId","nodes","unshift","visitHeading","toString","slugger","slug","transformer","visit","minifyAst","Array","isArray","reduce","n","isNoise","tag","push","Object","keys","JSON","stringify","rehypeMinify","githubSchema","defaultSchema","tagNames","attributes","div","blockquote","source","getProcessor","parse","sanitize","schema","minify","freeze","htmlToAst","Context","GithubSlugger","map","Number","tweetHtml"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAMA,OAAO,GAAG,yBAAyB,CAAA;AACzC,MAAMC,eAAe,GAAG,iCAAiC,CAAA;AACzD,MAAMC,KAAK,GAAG,IAAIC,yBAAK,CAACC,KAAK,CAAC;AAAEC,EAAAA,iBAAiB,EAAE,CAAA;AAAC,CAAE,CAAC,CAAA;AAEvD,SAASC,kBAAkB,CAACC,UAAU,EAAA;EACpC,IAAIC,OAAO,CAACC,GAAG,CAACC,oBAAoB,KAAK,MAAM,EAAE,OAAO,KAAK,CAAA;AAC7D,EAAA,IAAI,CAACH,UAAU,EAAE,OAAO,IAAI,CAAA;EAE5B,MAAMI,GAAG,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB,IAAI,EAAE,CAAA;AAErD,EAAA,OAAOD,GAAG,CAACE,QAAQ,CAACN,UAAU,CAAC,CAAA;AACjC,CAAA;AAEA,eAAeO,GAAG,CAACC,GAAW,EAAEC,IAAU,EAAA;AACxC;AACA;AACA;AACA,EAAA,MAAMC,GAAG,GAAG,MAAMC,yBAAK,CAACH,GAAG,EAAE;AAC3B,IAAA,GAAGC,IAAI;AACPd,IAAAA,KAAAA;AACD,GAAA,CAAC,CAAA;EAEF,IAAIe,GAAG,CAACE,EAAE,EAAE;IACV,OAAOF,GAAG,CAACG,IAAI,EAAE,CAAA;AAClB,GAAA;AAED,EAAA,IAAIH,GAAG,CAACI,MAAM,KAAK,GAAG,EAAE;AACtB,IAAA,OAAO,EAAE,CAAA;AACV,GAAA;AAED,EAAA,MAAM,IAAIC,KAAK,CAAC,CAAA,oBAAA,EAAuBL,GAAG,CAACI,MAAM,CAAA,CAAA,EAAIJ,GAAG,CAACM,UAAU,CAAA,CAAE,CAAC,CAAA;AACxE,CAAA;AAEO,eAAeC,eAAe,CAACC,GAAG,EAAA;AACvC,EAAA,OAAOX,GAAG,CAAI,CAAA,EAAAb,gBAAmCwB,iBAAAA,EAAAA,GAAG,EAAE,CAAC,CAAA;AACzD,CAAA;AAEO,eAAeC,cAAc,CAACC,EAAE,EAAA;AACrC,EAAA,MAAMC,IAAI,GAAG,MAAMJ,eAAe,CAACG,EAAE,CAAC,CAAA;EACtC,OAAOC,IAAI,CAACD,EAAE,CAAC,CAAA;AACjB,CAAA;AAEO,eAAeE,eAAe,CAACC,OAAO,EAAA;AAC3C;EACA,IAAI,CAACtB,OAAO,CAACC,GAAG,CAACsB,oBAAoB,EAAE,OAAO,IAAI,CAAA;AAElD,EAAA,OAAOjB,GAAG,CACR,CAAA,EAAGd,OAA6B,CAAA8B,mBAAAA,EAAAA,wDAAwD,EACxF;AACEE,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAY,CAAAzB,OAAAA,EAAAA,OAAO,CAACC,GAAG,CAACsB,oBAAsB,CAAA,CAAA;AAC5D,KAAA;AACF,GAAA,CACF,CAAA;AACH,CAAA;AAEO,eAAeG,kBAAkB,CAACJ,OAAO,EAAA;EAC9C,MAAMvB,UAAU,GAAG,sBAAsB,CAAA;AAEzC;AACA;AACA,EAAA,IAAI,CAACC,OAAO,CAACC,GAAG,CAACsB,oBAAoB,IAAI,CAACzB,kBAAkB,CAACC,UAAU,CAAC,EACtE,OAAO,IAAI,CAAA;EAEb,OAAOO,GAAG,CACL,CAAAd,EAAAA,mDAAmDO,UAAU,CAAA,KAAA,EAAQuB,OAAO,CAAA,CAAE,EACjF;AACEE,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAY,CAAAzB,OAAAA,EAAAA,OAAO,CAACC,GAAG,CAACsB,oBAAsB,CAAA,CAAA;AAC5D,KAAA;AACF,GAAA,CACF,CAAA;AACH,CAAA;AAEO,eAAeI,oBAAoB,CAACpB,GAAG,EAAA;AAC5C,EAAA,OAAOD,GAAG,CAAC,CAA0CC,uCAAAA,EAAAA,GAAG,EAAE,CAAC,CAAA;AAC7D;;AC7EA,SAASqB,eAAe,CAACC,CAAC,EAAA;AACxB,EAAA,MAAMC,SAAS,GAAGD,CAAC,CAAC,+BAA+B,CAAC,CAAA;AAEpD,EAAA,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE,OAAA;EAEvB,MAAMC,IAAI,GAAQ,EAAE,CAAA;AACpB,EAAA,MAAMC,OAAO,GAAQ;AAAED,IAAAA,IAAAA;GAAM,CAAA;AAE7B;AACA,EAAA,MAAME,OAAO,GAAGJ,SAAS,CAACK,IAAI,CAAC,iCAAiC,CAAC,CAAA;AAEjE;AACA,EAAA,MAAMC,MAAM,GAAGF,OAAO,CAACG,QAAQ,CAAC,eAAe,CAAC,CAAA;AAChD,EAAA,MAAMC,MAAM,GAAGF,MAAM,CAACD,IAAI,CAAC,gCAAgC,CAAC,CAAA;AAC5D,EAAA,MAAMI,MAAM,GAAGH,MAAM,CAACD,IAAI,CAAC,kCAAkC,CAAC,CAAA;AAC9D,EAAA,MAAMK,IAAI,GAAGD,MAAM,CAACJ,IAAI,CAAC,8BAA8B,CAAC,CAAA;AACxD,EAAA,MAAMM,UAAU,GAAGF,MAAM,CAACJ,IAAI,CAAC,qCAAqC,CAAC,CAAA;AAErE;AACA,EAAA,MAAMO,KAAK,GAAGR,OAAO,CAACG,QAAQ,CAAC,iCAAiC,CAAC,CAAA;AACjE,EAAA,MAAMM,YAAY,GAAGD,KAAK,CAACL,QAAQ,CAAC,GAAG,CAAC,CAAA;AACxC,EAAA,MAAMO,IAAI,GAAGF,KAAK,CAACL,QAAQ,CAAC,aAAa,CAAC,CAAA;AAC1C,EAAA,MAAMQ,SAAS,GAAGH,KAAK,CAACL,QAAQ,CAAC,YAAY,CAAC,CAAA;AAC9C,EAAA,MAAMS,aAAa,GAAGD,SAAS,CAACV,IAAI,CAAC,wCAAwC,CAAC,CAAA;AAC9E,EAAA,MAAMY,UAAU,GAAGF,SAAS,CAACV,IAAI,CAAC,qCAAqC,CAAC,CAAA;AAExE;AACA,EAAA,MAAMa,YAAY,GAAGlB,SAAS,CAACO,QAAQ,CACrC,4CAA4C,CAC7C,CAAA;AACD,EAAA,MAAMY,WAAW,GAAGD,YAAY,CAACX,QAAQ,CACvC,sCAAsC,CACvC,CAAA;AACD,EAAA,MAAMa,gBAAgB,GAAGF,YAAY,CAACX,QAAQ,CAC5C,2CAA2C,CAC5C,CAAA;AAED,EAAA,IAAIc,WAAW,CAAA;AACf,EAAA,IAAIC,SAAS,CAAA;EAEbpB,IAAI,CAACb,EAAE,GAAGe,OAAO,CAACmB,IAAI,CAAC,eAAe,CAAC,CAAA;EACvCrB,IAAI,CAACM,MAAM,GAAG;AACZgB,IAAAA,MAAM,EAAEhB,MAAM,CAACe,IAAI,CAAC,aAAa,CAAA;GAClC,CAAA;AACDrB,EAAAA,IAAI,CAACQ,IAAI,GAAGA,IAAI,CAACe,IAAI,EAAE,CAAA;AACvBvB,EAAAA,IAAI,CAACwB,QAAQ,GAAGf,UAAU,CAACc,IAAI,EAAE,CAACE,SAAS,CAAC,CAAC,CAAC,CAAA;AAC9CzB,EAAAA,IAAI,CAAC0B,SAAS,GAAG,IAAIC,IAAI,CAACb,aAAa,CAACO,IAAI,CAAC,eAAe,CAAC,CAAC,CAACO,OAAO,EAAE,CAAA;AACxE5B,EAAAA,IAAI,CAACe,UAAU,GAAGA,UAAU,CAACQ,IAAI,EAAE,CAAA;EACnCvB,IAAI,CAAC6B,OAAO,GAAGZ,WAAW,CAAClB,MAAM,GAAG,SAAS,GAAG,cAAc,CAAA;EAC9D,MAAM+B,QAAQ,GAAG,CAAA,oBAAA,EAAuB9B,IAAI,CAACwB,QAAQ,CAAWxB,QAAAA,EAAAA,IAAI,CAACb,EAAE,CAAE,CAAA,CAAA;EAEzE,IAAI+B,gBAAgB,CAACnB,MAAM,EAAE;AAC3B;AACAC,IAAAA,IAAI,CAAC+B,QAAQ,GAAGb,gBAAgB,CAACK,IAAI,EAAE,CAACS,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;AAC5D,GAAA;AAED;AACArB,EAAAA,YAAY,CAACsB,QAAQ,EAAE,CAACC,IAAI,CAAC,YAAA;AAC3B,IAAA,MAAMC,EAAE,GAAGtC,CAAC,CAAC,IAAI,CAAC,CAAA;AAClB,IAAA,MAAMuC,IAAI,GAAGD,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAA;IAEvB,IAAIA,IAAI,KAAK,MAAM,EAAE,OAAA;AAErB,IAAA,MAAMb,IAAI,GAAGY,EAAE,CAACZ,IAAI,EAAE,CAAA;IAEtB,IAAIA,IAAI,CAACxB,MAAM,IAAIwB,IAAI,CAACc,IAAI,EAAE,KAAK,EAAE,EAAE;MACrC,IAAIF,EAAE,CAACG,IAAI,EAAE,CAACjC,QAAQ,EAAE,CAACN,MAAM,EAAE;AAC/BoC,QAAAA,EAAE,CAACI,KAAK,CAAC1C,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;AACpB,OAAA;AACF,KAAA,MAAM,IACL,CAAC,KAAK,CAAC2C,IAAI,CAACL,EAAE,CAACZ,IAAI,EAAE,CAAC,IACtBY,EAAE,CAACG,IAAI,EAAE,CAACjC,QAAQ,EAAE,CAACN,MAAM,IAC3B,CAAC,OAAO,CAACyC,IAAI,CAACL,EAAE,CAACG,IAAI,EAAE,CAACf,IAAI,EAAE,CAAC,EAC/B;AACAY,MAAAA,EAAE,CAACI,KAAK,CAAC1C,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;AACpB,KAAA;AACH,GAAC,CAAC,CAAA;AAEFe,EAAAA,IAAI,CAACP,QAAQ,EAAE,CAAC6B,IAAI,CAAC,YAAA;AACnB,IAAA,MAAMO,KAAK,GAAG,IAAI,CAACC,OAAO,CAAA;AAC1B,IAAA,MAAMC,MAAM,GAAGF,KAAK,CAAC,aAAa,CAAC,CAAA;AACnC,IAAA,MAAMN,EAAE,GAAGtC,CAAC,CAAC,IAAI,CAAC,CAAA;IAElB,IAAI8C,MAAM,KAAK,eAAe,EAAE;AAC9B,MAAA,MAAMC,SAAS,GAAGT,EAAE,CAAC9B,QAAQ,CAAC,GAAG,CAAC,CAAA;AAClC,MAAA,MAAMlB,EAAE,GAAGyD,SAAS,CAACvB,IAAI,CAAC,eAAe,CAAC,CAAA;AAC1C,MAAA,MAAM9C,GAAG,GAAGqE,SAAS,CAACvB,IAAI,CAAC,MAAM,CAAC,CAAA;AAElCF,MAAAA,WAAW,GAAG;QAAEhC,EAAE;AAAEZ,QAAAA,GAAAA;OAAK,CAAA;AACzB,MAAA,OAAA;AACD,KAAA;AAED,IAAA,MAAMsE,KAAK,GAAGhD,CAAC,CAAC,OAAO,CAAC,CAAA;IAExB,IAAI8C,MAAM,KAAK,gBAAgB,EAAE;AAC/B,MAAA,MAAMG,KAAK,GAAGX,EAAE,CAAC9B,QAAQ,CAAC,+BAA+B,CAAC,CAAA;AAC1D,MAAA,MAAM0C,SAAS,GAAGZ,EAAE,CAAC9B,QAAQ,CAAC,oCAAoC,CAAC,CAAA;MACnE,MAAM2C,MAAM,GAAGF,KAAK,CAAC/C,MAAM,GAAG+C,KAAK,GAAGC,SAAS,CAAA;MAE/C,IAAIC,MAAM,CAACjD,MAAM,EAAE;AACjB,QAAA,MAAMkD,MAAM,GAAGD,MAAM,CAAC7C,IAAI,CAAC,KAAK,CAAC,CAAA;QAEjC8C,MAAM,CAACf,IAAI,CAAC,YAAA;AACV,UAAA,MAAMgB,GAAG,GAAGrD,CAAC,CAAC,IAAI,CAAC,CAAA;AACnB,UAAA,MAAMsD,GAAG,GAAGD,GAAG,CAAC7B,IAAI,CAAC,KAAK,CAAC,CAAA;AAC3B,UAAA,MAAM9C,GAAG,GAAG2E,GAAG,CAAC7B,IAAI,CAAC,YAAY,CAAC,CAAA;AAClC,UAAA,MAAM+B,MAAM,GAAGF,GAAG,CAAC7B,IAAI,CAAC,mBAAmB,CAAC,CAAA;AAC5C,UAAA,MAAMgC,MAAM,GAAGH,GAAG,CAAC7B,IAAI,CAAC,QAAQ,CAAC,CAAA;AACjC,UAAA,MAAMiC,KAAK,GAAGJ,GAAG,CAAC7B,IAAI,CAAC,OAAO,CAAC,CAAA;UAE/B,IAAI,CAACqB,OAAO,GAAG;AACb,YAAA,WAAW,EAAE,aAAa;AAC1B,YAAA,UAAU,EAAEZ,QAAQ;AACpByB,YAAAA,GAAG,EAAE,CAAA,EAAGhF,GAAG,CAAA,QAAA,EAAW6E,MAAQ,CAAA,CAAA;YAC9BC,MAAM;AACNC,YAAAA,KAAAA;WACD,CAAA;AACD,UAAA,IAAIH,GAAG,EAAE;AACP,YAAA,IAAI,CAACT,OAAO,CAACS,GAAG,GAAGA,GAAG,CAAA;AACvB,WAAA;AACD;AACAN,UAAAA,KAAK,CAACW,MAAM,CAACN,GAAG,CAAC,CAAA;AACnB,SAAC,CAAC,CAAA;QACFL,KAAK,CAACxB,IAAI,CAAC,WAAW,EAAqB,mBAAA4B,MAAM,CAAClD,MAAQ,CAAA,CAAA,CAAC,CAAA;AAC3DqB,QAAAA,SAAS,GAAGvB,CAAC,CAAC,OAAO,CAAC,CAAC2D,MAAM,CAACX,KAAK,CAAC,CAACzD,IAAI,EAAE,CAAA;AAC5C,OAAA;AACF,KAAA;AACH,GAAC,CAAC,CAAA;EAEFuB,YAAY,CAACN,QAAQ,CAAC,KAAK,CAAC,CAAC6B,IAAI,CAAC,YAAA;AAAA,IAAA,IAAA,YAAA,CAAA;AAChC,IAAA,MAAMO,KAAK,GAAG,IAAI,CAACC,OAAO,CAAA;AAE1B;IACA,IAAID,CAAAA,YAAAA,GAAAA,KAAK,CAACgB,KAAK,KAAA,IAAA,IAAX,aAAapF,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MAC3C,IAAI,CAACqE,OAAO,GAAG;AACb,QAAA,WAAW,EAAE,gBAAgB;QAC7Ba,GAAG,EAAEd,KAAK,CAACc,GAAG;QACdJ,GAAG,EAAEV,KAAK,CAACU,GAAAA;OACZ,CAAA;AACD,MAAA,OAAA;AACD,KAAA;AAEDO,IAAAA,OAAO,CAACC,KAAK,CACX,yDAAyD,EACzDlB,KAAK,CACN,CAAA;AACH,GAAC,CAAC,CAAA;EAEF9B,YAAY,CAACN,QAAQ,CAAC,GAAG,CAAC,CAAC6B,IAAI,CAAC,YAAA;AAC9B,IAAA,MAAMO,KAAK,GAAG,IAAI,CAACC,OAAO,CAAA;AAC1B,IAAA,MAAMC,MAAM,GAAGF,KAAK,CAAC,aAAa,CAAC,CAAA;AACnC,IAAA,MAAMN,EAAE,GAAGtC,CAAC,CAAC,IAAI,CAAC,CAAA;IAClB,MAAM+D,aAAa,GAAIxB,IAAI,IAAI;MAC7B,IAAI,CAACM,OAAO,GAAG;AACb,QAAA,WAAW,EAAEN,IAAI;QACjByB,IAAI,EAAEpB,KAAK,CAACoB,IAAAA;OACb,CAAA;AACD;AACA1B,MAAAA,EAAE,CAACZ,IAAI,CAACY,EAAE,CAACZ,IAAI,EAAE,CAAC,CAAA;KACnB,CAAA;AAED;IACA,IAAIoB,MAAM,KAAK,iBAAiB,EAAE;MAChC,OAAOiB,aAAa,CAAC,SAAS,CAAC,CAAA;AAChC,KAAA;AAED;IACA,IAAIjB,MAAM,KAAK,iBAAiB,EAAE;AAChC;MACA,MAAMP,IAAI,GACRK,KAAK,CAAC,mBAAmB,CAAC,KAAK,eAAe,GAAG,SAAS,GAAG,SAAS,CAAA;MACxE,OAAOmB,aAAa,CAACxB,IAAI,CAAC,CAAA;AAC3B,KAAA;IAED,IAAIO,MAAM,KAAK,aAAa,EAAE;AAC5B,MAAA,MAAMpE,GAAG,GAAGkE,KAAK,CAAC,mBAAmB,CAAC,CAAA;AACtC;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAA,MAAMlB,IAAI,GAAG;AAAEa,QAAAA,IAAI,EAAE,MAAM;AAAE0B,QAAAA,IAAI,EAAEvF,GAAAA;OAAK,CAAA;AACxC;AACA4D,MAAAA,EAAE,CAAC4B,WAAW,CAACxC,IAAI,CAAC,CAAA;AACrB,KAAA;AACH,GAAC,CAAC,CAAA;AAEFtB,EAAAA,OAAO,CAACb,IAAI,GAAGuB,YAAY,CAACvB,IAAI,EAAE,CAAA;AAElC,EAAA,IAAI+B,WAAW,EAAElB,OAAO,CAACkB,WAAW,GAAGA,WAAW,CAAA;AAClD,EAAA,IAAIC,SAAS,EAAEnB,OAAO,CAACmB,SAAS,GAAGA,SAAS,CAAA;AAE5C,EAAA,OAAOnB,OAAO,CAAA;AAChB,CAAA;AAEM,SAAU+D,YAAY,CAAC5E,IAAI,EAAA;AAC/B,EAAA,MAAMS,CAAC,GAAGoE,2BAAO,CAACC,IAAI,CAAC9E,IAAI,EAAE;AAC3B+E,IAAAA,cAAc,EAAE,KAAK;AACrBC,IAAAA,OAAO,EAAE,KAAA;AACV,GAAA,CAAC,CAAA;AACF,EAAA,MAAMzD,YAAY,GAAGf,eAAe,CAACC,CAAC,CAAC,CAAA;AAEvC,EAAA,OAAOc,YAAY,CAAA;AACrB;;ACFM,SAAU0D,QAAQ,CAACjF,IAAI,EAAE;EAAEkF,MAAM;AAAE/F,EAAAA,GAAAA;AAAK,CAAA,EAAA;AAC5C,EAAA,MAAMsB,CAAC,GAAGoE,2BAAO,CAACC,IAAI,CAAC9E,IAAI,EAAE;AAC3B+E,IAAAA,cAAc,EAAE,KAAK;AACrBC,IAAAA,OAAO,EAAE,KAAA;AACV,GAAA,CAAC,CAAA;AACF,EAAA,MAAMtE,SAAS,GAAGD,CAAC,CAAC,6BAA6B,CAAC,CAAA;AAClD,EAAA,MAAM0E,KAAK,GAAG1E,CAAC,mBACKyE,MAAM,CAAA,sCAAA,CAAwC,CACjE,CAACd,MAAM,CAAC,CAAgBjF,aAAAA,EAAAA,GAAG,qBAAqB,CAAC,CAAA;AAElD,EAAA,OAAOsB,CAAC,CAAC,OAAO,CAAC,CAAC2D,MAAM,CAAC1D,SAAS,CAAC0D,MAAM,CAACe,KAAK,CAAC,CAAC,CAACnF,IAAI,EAAE,CAAA;AAC1D;;ACpNA,MAAMoF,QAAQ,GAAG;AACf;AACAC,EAAAA,UAAU,CAACC,CAAM,EAAEC,IAAI,EAAA;IACrB,OAAO;AACL,MAAA,GAAGA,IAAI;AACPvC,MAAAA,IAAI,EAAE,SAAS;AACfwC,MAAAA,OAAO,EAAE,MAAM;AACfC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,SAAS,EAAE,QAAA;OAAU;AACnCzE,MAAAA,QAAQ,EAAE,CACR;AACE+B,QAAAA,IAAI,EAAE,MAAM;QACZ2C,KAAK,EAAEJ,IAAI,CAACI,KAAAA;OACb,CAAA;KAEJ,CAAA;AACH,GAAA;CACD,CAAA;AAED,SAASC,KAAK,GAAA;AACZ,EAAA,IAAI,CAACC,QAAQ,GAAIC,IAAI,IAAKA,IAAI,CAAA;AAChC,CAAA;AAEA;AACA,MAAMC,SAAS,GAAGC,2BAAO,EAAE,CACxBC,GAAG,CAACC,4BAAQ,CAAC,CACbD,GAAG,CAACE,kCAAc,EAAE;EAAEf,QAAQ;AAAEgB,EAAAA,kBAAkB,EAAE,IAAA;AAAI,CAAE,CAAA;AAC3D;AAAA,CACCH,GAAG,CAACI,uBAAG,CAAA;AACR;AAAA,CACCJ,GAAG,CAACK,yBAAK,CAAC,CACVL,GAAG,CAACL,KAAK,CAAC,CAAA;AAEE,eAAeW,aAAa,CAACC,EAAE,EAAA;EAC5C,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMV,SAAS,CAACnH,OAAO,CAAC4H,EAAE,CAAC,CAAA;IACxC,OAAOC,IAAI,CAACC,MAAM,CAAA;GACnB,CAAC,OAAOnC,KAAK,EAAE;AACd;AACAD,IAAAA,OAAO,CAACC,KAAK,EAA2BA,uBAAAA,EAAAA,KAAK,EAAE,CAAC,CAAA;AAChD,IAAA,MAAMA,KAAK,CAAA;AACZ,GAAA;AACH;;ACtCA,SAASoC,YAAY,CAACC,UAAU,EAAA;EAC9B,MAAMzB,KAAK,GAAGyB,UAAU,CAACC,iBAAiB,CAACpD,KAAK,CAAC,CAAC,CAAC,CAAA;AACnD,EAAA,MAAMyB,MAAM,GAAGC,KAAK,CAAC2B,eAAe,CAAA;AACpC;AACA;AACA,EAAA,MAAMC,QAAQ,GAAG5B,KAAK,CAAC6B,UAAU,CAACC,QAAQ,CAAClG,IAAI,CAC5CmG,CAAC,IAAKA,CAAC,CAACC,YAAY,KAAK,WAAW,CACtC,CAAA;EAED,IAAI,CAACJ,QAAQ,EAAE,OAAA;EAEf,OAAO;IAAE7B,MAAM;IAAE,GAAG6B,QAAAA;GAAU,CAAA;AAChC,CAAA;AAEA,SAASK,WAAW,CAAC9F,KAAK,EAAA;EACxB,MAAM+F,KAAK,GAAG/F,KAAK,CAACrC,QAAQ,IAAIqC,KAAK,CAACrC,QAAQ,CAACoI,KAAK,CAAA;AACpD,EAAA,OAAOA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAA;AAC1B,CAAA;AAEA,eAAeC,YAAY,CAAChG,KAAK,EAAA;AAC/B,EAAA,IAAImC,KAAK,GAAGnC,KAAK,CAACU,SAAS,CAAA;EAE3B,IAAIV,KAAK,CAACiG,QAAQ,EAAE;IAClB,MAAMX,UAAU,GAAG,MAAM3G,eAAe,CAACqB,KAAK,CAACV,IAAI,CAACb,EAAE,CAAC,CAAA;AACvD,IAAA,MAAMoF,KAAK,GAAGyB,UAAU,IAAID,YAAY,CAACC,UAAU,CAAC,CAAA;IAEpDnD,KAAK,GAAG0B,KAAK,GAAGF,QAAQ,CAACxB,KAAK,EAAE0B,KAAK,CAAC,GAAG,IAAI,CAAA;AAC9C,GAAA;AAED,EAAA,OAAO1B,KAAK,CAAA;AACd,CAAA;AAEA,eAAe+D,kBAAkB,CAAC;AAAEzF,EAAAA,WAAAA;AAAW,CAAE,EAAE0F,OAAO,EAAA;EACxD,IAAI,CAAC1F,WAAW,EAAE,OAAA;AAElB,EAAA,IAAInD,OAAO,CAACC,GAAG,CAAC6I,gCAAgC,KAAK,MAAM,EAAE;IAC3D,MAAMhD,IAAI,GAAG,MAAMnE,oBAAoB,CAACwB,WAAW,CAAC5C,GAAG,CAAC,CAAA;AACxD,IAAA,OAAOuF,IAAI,IAAA,IAAA,GAAA,KAAA,CAAA,GAAJA,IAAI,CAAE1E,IAAI,CAAA;AAClB,GAAA,MAAM;IACL,MAAM2H,GAAG,GAAG,MAAMC,aAAa,CAAC7F,WAAW,CAAChC,EAAE,CAAC,CAAA;AAC/C;AACA,IAAA,OAAO4H,GAAG,IAA4B,CAAA,qBAAA,EAAAF,OAAO,CAACI,GAAG,CAAC;AAAEF,MAAAA,GAAAA;AAAG,KAAE,CAAC,CAAiB,eAAA,CAAA,CAAA;AAC5E,GAAA;AACH,CAAA;AAEA,eAAeG,WAAW,CAACxG,KAAK,EAAEmG,OAAO,EAAA;AACvC,EAAA,IAAI,CAACnG,KAAK,CAACyG,OAAO,EAAE,OAAO,IAAI,CAAA;EAE/B,MAAMC,SAAS,GAAG,MAAM1H,kBAAkB,CAACgB,KAAK,CAACV,IAAI,CAACb,EAAE,CAAC,CAAA;AACzD,EAAA,MAAMkI,IAAI,GAAGD,SAAS,IAAIZ,WAAW,CAACY,SAAS,CAAC,CAAA;AAEhD,EAAA,IAAIC,IAAI,EAAE;AACR,IAAA,MAAMrH,IAAI,GAAG;AACXoC,MAAAA,IAAI,EAAE,gBAAgB;MACtBkF,MAAM,EAAED,IAAI,CAACE,YAAY;MACzBC,QAAQ,EAAEH,IAAI,CAACI,gBAAgB;MAC/B5I,MAAM,EAAEwI,IAAI,CAACK,aAAa;MAC1BC,OAAO,EAAEN,IAAI,CAACM,OAAAA;KACf,CAAA;AAED,IAAA,OAAO,iBAAiBd,OAAO,CAACI,GAAG,CAACjH,IAAI,EAAW,QAAA,CAAA,CAAA;AACpD,GAAA;AAED,EAAA,OAAO,IAAI,CAAA;AACb,CAAA;AAEe,eAAe4H,YAAY,CAAClH,KAAK,EAAEmG,OAAO,EAAA;AACvD,EAAA,MAAM7G,IAAI,GAAG;IAAE,GAAGU,KAAK,CAACV,IAAI;AAAEoC,IAAAA,IAAI,EAAE,OAAA;GAAS,CAAA;EAC7C,MAAMwD,EAAE,GAAQ,MAAMD,aAAa,CAACjF,KAAK,CAACtB,IAAI,CAAC,CAAA;AAE/C,EAAA,MAAMA,IAAI,GAAG;AACX;EACiB,CAAAyH,cAAAA,EAAAA,OAAO,CAACI,GAAG,CAACjH,IAAI,EAAE4F,EAAE,CAACvF,QAAQ,CAAK,CAAA,EAAA,CAAA,EACnD,CAAC,MAAMqG,YAAY,CAAChG,KAAK,CAAC,KAAK,EAAE,EACjC,CAAC,MAAMkG,kBAAkB,CAAClG,KAAK,EAAEmG,OAAO,CAAC,KAAK,EAAE,EAChD,CAAC,MAAMK,WAAW,CAACxG,KAAK,EAAEmG,OAAO,CAAC,KAAK,EAAE,EACjC,CAAA,MAAA,CAAA,CACT,CAACgB,IAAI,CAAC,EAAE,CAAC,CAAA;AAEV,EAAA,OAAOzI,IAAI,CAAA;AACb;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwGA;AACO,MAAM,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU,IAAI,EAAE;AACpB,MAAM,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;AAC/C,QAAQ,OAAO,EAAE;AACjB,OAAO;AACP;AACA,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AACpC,QAAQ,OAAO,WAAW,CAAC,IAAI,CAAC;AAChC,OAAO;AACP;AACA,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AACpC,QAAQ,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC;AAC1E,OAAO;AACP;AACA,MAAM,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;AACtC,QAAQ,OAAO,WAAW,CAAC,IAAI,CAAC;AAChC,OAAO;AACP;AACA,MAAM,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC;AACrE,KAAK;AACL,IAAG;AACH;AACA;AACA;AACA;AACA,SAAS,UAAU,CAAC,KAAK,EAAE;AAC3B;AACA,EAAE,MAAM,MAAM,GAAG,GAAE;AACnB,EAAE,IAAI,KAAK,GAAG,CAAC,EAAC;AAChB;AACA,EAAE,OAAO,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE;AACjC,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAC;AACzC,GAAG;AACH;AACA,EAAE,OAAO,WAAW,CAAC,GAAG,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,CAAC,GAAG,UAAU,EAAE;AAC9B,IAAI,IAAI,KAAK,GAAG,CAAC,EAAC;AAClB;AACA,IAAI,OAAO,EAAE,KAAK,GAAG,MAAM,CAAC,MAAM,EAAE;AACpC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,UAAU,CAAC,EAAE,OAAO,IAAI;AAC9D,KAAK;AACL;AACA,IAAI,OAAO,KAAK;AAChB,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,CAAC,KAAK,EAAE;AAC7B,EAAE,OAAO,WAAW,CAAC,GAAG,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,CAAC,IAAI,EAAE;AACrB;AACA,IAAI,IAAI,IAAG;AACX;AACA,IAAI,KAAK,GAAG,IAAI,KAAK,EAAE;AACvB;AACA,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,KAAK;AAChD,KAAK;AACL;AACA,IAAI,OAAO,IAAI;AACf,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,KAAK,EAAE;AAC5B,EAAE,OAAO,WAAW,CAAC,IAAI,CAAC;AAC1B;AACA;AACA;AACA;AACA,EAAE,SAAS,IAAI,CAAC,IAAI,EAAE;AACtB,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK;AACtC,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,KAAK,EAAE;AAC5B,EAAE,OAAO,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,SAAS,CAAC,GAAG,UAAU,EAAE;AACpC;AACA,IAAI,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC;AACnD,GAAG;AACH,CAAC;AACD;AACA;AACA,SAAS,EAAE,GAAG;AACd,EAAE,OAAO,IAAI;AACb;;AC1PA;AACA;AACA;AACA;AACO,SAAS,KAAK,CAAC,CAAC,EAAE;AACzB,EAAE,OAAO,YAAY,GAAG,CAAC,GAAG,YAAY;AACxC;;ACNA;AACA;AACA;AACA;AACA;AA6BA;AACA;AACA;AACA;AACO,MAAM,QAAQ,GAAG,KAAI;AAC5B;AACA;AACA;AACO,MAAM,IAAI,GAAG,OAAM;AAC1B;AACA;AACA;AACO,MAAM,IAAI,GAAG,MAAK;AACzB;AACO,MAAM,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;AAC5C,MAAM,IAAI,OAAO,IAAI,KAAK,UAAU,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;AACvE,QAAQ,OAAO,GAAG,QAAO;AACzB;AACA,QAAQ,OAAO,GAAG,KAAI;AACtB,QAAQ,IAAI,GAAG,KAAI;AACnB,OAAO;AACP;AACA,MAAM,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,EAAC;AAC5B,MAAM,IAAI,IAAI,GAAG,OAAO,GAAG,CAAC,CAAC,GAAG,EAAC;AACjC;AACA,MAAM,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,GAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;AAC7C;AACA,QAAQ,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,GAAE;AACzE;AACA,QAAQ,IAAI,KAAI;AAChB;AACA,QAAQ,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC5C,UAAU,IAAI;AACd,YAAY,OAAO,KAAK,CAAC,OAAO,KAAK,QAAQ;AAC7C,gBAAgB,KAAK,CAAC,OAAO;AAC7B,gBAAgB,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ;AAC9C,gBAAgB,KAAK,CAAC,IAAI;AAC1B,gBAAgB,UAAS;AACzB;AACA,UAAU,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE;AAC/C,YAAY,KAAK;AACjB,cAAc,QAAQ;AACtB,cAAc,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;AAChE,cAAc,GAAG;AACjB,WAAW,EAAC;AACZ,SAAS;AACT;AACA,QAAQ,OAAO,KAAK;AACpB;AACA,QAAQ,SAAS,KAAK,GAAG;AACzB;AACA,UAAU,IAAI,MAAM,GAAG,GAAE;AACzB;AACA,UAAU,IAAI,UAAS;AACvB;AACA,UAAU,IAAI,OAAM;AACpB;AACA,UAAU,IAAI,aAAY;AAC1B;AACA,UAAU,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE;AAC7E,YAAY,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,EAAC;AACrD;AACA,YAAY,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AACpC,cAAc,OAAO,MAAM;AAC3B,aAAa;AACb,WAAW;AACX;AACA,UAAU,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AACnD;AACA,YAAY,MAAM,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,KAAI;AACjE;AACA,YAAY,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAC;AAC/C;AACA;AACA,YAAY,OAAO,MAAM,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;AACjE,cAAc,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,YAAY,CAAC,GAAE;AAChF;AACA,cAAc,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AACzC,gBAAgB,OAAO,SAAS;AAChC,eAAe;AACf;AACA,cAAc,MAAM;AACpB,gBAAgB,OAAO,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,KAAI;AAC/E,aAAa;AACb,WAAW;AACX;AACA,UAAU,OAAO,MAAM;AACvB,SAAS;AACT,OAAO;AACP,KAAK;AACL,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ,CAAC,KAAK,EAAE;AACzB,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AAC5B,IAAI,OAAO,KAAK;AAChB,GAAG;AACH;AACA,EAAE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACjC,IAAI,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC;AAC5B,GAAG;AACH;AACA,EAAE,OAAO,CAAC,KAAK,CAAC;AAChB;;ACnKA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACO,MAAM,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;AAC5C,MAAM,IAAI,OAAO,IAAI,KAAK,UAAU,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;AACvE,QAAQ,OAAO,GAAG,QAAO;AACzB,QAAQ,OAAO,GAAG,KAAI;AACtB,QAAQ,IAAI,GAAG,KAAI;AACnB,OAAO;AACP;AACA,MAAM,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAC;AACjD;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE;AACvC,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAC;AAChD,QAAQ,OAAO,OAAO;AACtB,UAAU,IAAI;AACd,UAAU,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI;AACvD,UAAU,MAAM;AAChB,SAAS;AACT,OAAO;AACP,KAAK;AACL;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE;AACxC,EAAE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,OAAO,IAAI,GAAE;AAC9C,EAAE,OAAO,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC;AACnC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG,CAAC,IAAI,EAAE,eAAe,EAAE;AACpC,EAAE;AACF,IAAI,CAAC,IAAI;AACT,MAAM,OAAO,IAAI,KAAK,QAAQ;AAC9B;AACA,OAAO,IAAI,CAAC,KAAK;AACjB;AACA,SAAS,eAAe,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;AACzC;AACA,SAAS,UAAU,IAAI,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;AACnE,SAAS,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;AAC5D,IAAI,EAAE;AACN,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG,CAAC,MAAM,EAAE,eAAe,EAAE;AACtC;AACA,EAAE,IAAI,MAAM,GAAG,GAAE;AACjB,EAAE,IAAI,KAAK,GAAG,CAAC,EAAC;AAChB;AACA,EAAE,OAAO,EAAE,KAAK,GAAG,MAAM,CAAC,MAAM,EAAE;AAClC,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,eAAe,EAAC;AACvD,GAAG;AACH;AACA,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;AACxB;;AClDA,MAAM0I,WAAW,GAAG,qBAAqB,CAAA;AACzC,MAAMC,YAAY,GAAG,qBAAqB,CAAA;AAC1C,MAAMC,QAAQ,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AAErD,SAASC,WAAW,CAACtD,IAAI,EAAA;AACvB,EAAA,IAAI,CAACA,IAAI,CAACE,UAAU,EAAE,OAAA;EAEtB,MAAM;AAAEhB,IAAAA,IAAAA;GAAM,GAAGc,IAAI,CAACE,UAAU,CAAA;EAEhC,IAAI,CAAChB,IAAI,EAAE,OAAA;AAEX,EAAA,MAAMqE,aAAa,GAAGH,YAAY,CAACvF,IAAI,CAACqB,IAAI,CAAC,CAAA;EAE7C,IAAI,CAACqE,aAAa,EAAE;IAClBvD,IAAI,CAACE,UAAU,CAAChB,IAAI,GAAGsE,WAAO,CAACL,WAAW,EAAEjE,IAAI,CAAC,CAAA;AAClD,GAAA;AACH,CAAA;AAEwB,SAAAuE,WAAW,CAACvB,OAAO,EAAA;AACzC;EACA,SAASwB,SAAS,CAAC1D,IAAI,EAAA;IACrB,MAAM2D,GAAG,GAAGzB,OAAO,CAACvI,GAAG,CAACqG,IAAI,CAACE,UAAU,CAAC0D,MAAM,CAAC,CAAA;AAE/C,IAAA,IAAID,GAAG,IAAA,IAAA,IAAHA,GAAG,CAAExE,IAAI,EAAEa,IAAI,CAACb,IAAI,GAAGwE,GAAG,CAACxE,IAAI,CAAA;AAEnC;AACA,IAAA,IAAIwE,GAAG,IAAA,IAAA,IAAHA,GAAG,CAAEE,KAAK,EAAE;MACd7D,IAAI,CAACtE,QAAQ,CAACoI,OAAO,CAAC,GAAGH,GAAG,CAACE,KAAK,CAAC,CAAA;AACpC,KAAA;AAED,IAAA,OAAO7D,IAAI,CAACE,UAAU,CAAC0D,MAAM,CAAA;AAC/B,GAAA;EAEA,SAASG,YAAY,CAAC/D,IAAI,EAAA;AACxB,IAAA,MAAMpD,IAAI,GAAGoH,QAAQ,CAAChE,IAAI,CAAC,CAAA;IAE3B,IAAI,CAACpD,IAAI,EAAE,OAAA;IAEX,MAAMpC,EAAE,GAAG0H,OAAO,CAAC+B,OAAO,CAACC,IAAI,CAACtH,IAAI,CAAC,CAAA;IAErCoD,IAAI,CAACb,IAAI,GAAG;AAAE3E,MAAAA,EAAAA;KAAI,CAAA;AACpB,GAAA;AAEA,EAAA,OAAO,SAAS2J,WAAW,CAAC5D,IAAI,EAAA;IAC9B6D,KAAK,CAAC7D,IAAI,EAAGP,IAAS,IAAA;AAAA,MAAA,IAAA,gBAAA,CAAA;AAAA,MAAA,OAAA,CAAA,gBAAA,GAAKA,IAAI,CAACE,UAAU,KAAA,IAAA,GAAA,KAAA,CAAA,GAAf,iBAAiB0D,MAAM,CAAA;AAAA,KAAA,EAAEF,SAAS,CAAC,CAAA;AAC9DU,IAAAA,KAAK,CAAC7D,IAAI,EAAGP,IAAS,IAAKA,IAAI,CAACC,OAAO,KAAK,GAAG,EAAEqD,WAAW,CAAC,CAAA;AAC7Dc,IAAAA,KAAK,CAAC7D,IAAI,EAAGP,IAAS,IAAKqD,QAAQ,CAAC3J,QAAQ,CAACsG,IAAI,CAACC,OAAO,CAAC,EAAE8D,YAAY,CAAC,CAAA;GAC1E,CAAA;AACH;;ACpDA,SAASM,SAAS,CAACjC,GAAG,EAAA;AACpB,EAAA,IAAIkC,KAAK,CAACC,OAAO,CAACnC,GAAG,CAAC,EAAE;IACtB,OAAOA,GAAG,CAACoC,MAAM,CAAC,CAACX,KAAK,EAAE7D,IAAI,KAAI;AAAA,MAAA,IAAA,MAAA,CAAA;AAChC,MAAA,MAAMyE,CAAC,GAAGJ,SAAS,CAACrE,IAAI,CAAC,CAAA;AACzB;AACA,MAAA,MAAM0E,OAAO,GAAGD,CAAC,KAAK,IAAI,IAAI,WAAAZ,KAAK,CAACA,KAAK,CAACzI,MAAM,GAAG,CAAC,CAAC,qBAAvB,MAAyBuJ,CAAAA,GAAG,MAAK,MAAM,CAAA;MAErE,IAAI,CAACD,OAAO,EAAEb,KAAK,CAACe,IAAI,CAACH,CAAC,CAAC,CAAA;AAE3B,MAAA,OAAOZ,KAAK,CAAA;KACb,EAAE,EAAE,CAAC,CAAA;AACP,GAAA;AACD;EACA,IAAI,CAACzB,GAAG,CAACnC,OAAO,IAAImC,GAAG,CAAC1G,QAAQ,EAAE;AAChC,IAAA,OAAO2I,SAAS,CAACjC,GAAG,CAAC1G,QAAQ,CAAC,CAAA;AAC/B,GAAA;AACD,EAAA,IAAI0G,GAAG,CAAC3E,IAAI,KAAK,MAAM,EAAE;IACvB,OAAO2E,GAAG,CAAChC,KAAK,CAAA;AACjB,GAAA;AACD,EAAA,IAAIgC,GAAG,CAAC3E,IAAI,KAAK,SAAS,EAAE;AAAA,IAAA,IAAA,aAAA,CAAA;AAC1B,IAAA,MAAMuC,IAAI,GAAQ;MAAE2E,GAAG,EAAEvC,GAAG,CAACnC,OAAAA;KAAS,CAAA;AACtC,IAAA,MAAMvE,QAAQ,GAAG,CAAA,aAAA,GAAA0G,GAAG,CAAC1G,QAAQ,KAAZ,IAAA,IAAA,aAAA,CAAcN,MAAM,GAAGiJ,SAAS,CAACjC,GAAG,CAAC1G,QAAQ,CAAC,GAAG,EAAE,CAAA;AAEpE,IAAA,IAAI0G,GAAG,CAAClC,UAAU,IAAI2E,MAAM,CAACC,IAAI,CAAC1C,GAAG,CAAClC,UAAU,CAAC,CAAC9E,MAAM,EAAE;AACxD4E,MAAAA,IAAI,CAAClC,KAAK,GAAGsE,GAAG,CAAClC,UAAU,CAAA;AAC5B,KAAA;IACD,IAAIkC,GAAG,CAACjD,IAAI,EAAE;AACZa,MAAAA,IAAI,CAACb,IAAI,GAAGiD,GAAG,CAACjD,IAAI,CAAA;AACrB,KAAA;IACD,IAAIzD,QAAQ,CAACN,MAAM,EAAE;MACnB4E,IAAI,CAAC6D,KAAK,GAAGnI,QAAQ,CAAA;AACtB,KAAA;AAED,IAAA,OAAOsE,IAAI,CAAA;AACZ,GAAA;AAED,EAAA,MAAM,IAAI7F,KAAK,CAC0B,CAAA,oCAAA,EAAA4K,IAAI,CAACC,SAAS,CAAC5C,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CACtE,CAAA;AACH,CAAA;AAEA,SAAS6C,YAAY,GAAA;EACnB,IAAI,CAAC3E,QAAQ,GAAIC,IAAI,IAAK8D,SAAS,CAAC9D,IAAI,CAAC,CAAA;AAC3C;;AC3CA;AACO,MAAM,aAAa,GAAG;AAC7B,EAAE,KAAK,EAAE,CAAC,QAAQ,CAAC;AACnB,EAAE,aAAa,EAAE,eAAe;AAChC,EAAE,OAAO,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC;AACzB,EAAE,SAAS,EAAE;AACb,IAAI,KAAK,EAAE,CAAC,OAAO,CAAC;AACpB,IAAI,KAAK,EAAE,CAAC,OAAO,CAAC;AACpB,IAAI,KAAK,EAAE,CAAC,OAAO,CAAC;AACpB,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC;AACjB,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC;AACjB,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC;AACjB,GAAG;AACH,EAAE,SAAS,EAAE;AACb,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;AAC5D,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;AAC3B,IAAI,GAAG,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;AAC1B,IAAI,QAAQ,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;AAC/B,GAAG;AACH,EAAE,QAAQ,EAAE;AACZ,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,GAAG;AACP,IAAI,GAAG;AACP,IAAI,QAAQ;AACZ,IAAI,IAAI;AACR,IAAI,GAAG;AACP,IAAI,KAAK;AACT,IAAI,MAAM;AACV,IAAI,KAAK;AACT,IAAI,IAAI;AACR,IAAI,KAAK;AACT,IAAI,KAAK;AACT,IAAI,KAAK;AACT,IAAI,KAAK;AACT,IAAI,KAAK;AACT,IAAI,GAAG;AACP,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,OAAO;AACX,IAAI,OAAO;AACX,IAAI,OAAO;AACX,IAAI,OAAO;AACX,IAAI,YAAY;AAChB,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,KAAK;AACT,IAAI,GAAG;AACP,IAAI,MAAM;AACV,IAAI,KAAK;AACT,IAAI,IAAI;AACR,IAAI,MAAM;AACV,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,IAAI;AACR,IAAI,GAAG;AACP,IAAI,QAAQ;AACZ,IAAI,SAAS;AACb,IAAI,SAAS;AACb,IAAI,SAAS;AACb,IAAI,QAAQ;AACZ,IAAI,YAAY;AAChB,IAAI,MAAM;AACV,IAAI,KAAK;AACT,IAAI,MAAM;AACV,IAAI,KAAK;AACT,IAAI,MAAM;AACV,IAAI,OAAO;AACX,IAAI,MAAM;AACV,IAAI,MAAM;AACV,IAAI,KAAK;AACT,IAAI,OAAO;AACX,GAAG;AACH,EAAE,UAAU,EAAE;AACd,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC;AACf,IAAI,GAAG,EAAE,CAAC,KAAK,EAAE,UAAU,CAAC;AAC5B,IAAI,KAAK,EAAE;AACX,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC;AAC1B,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;AACxB,KAAK;AACL,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;AACzC,IAAI,GAAG,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC;AAClC,IAAI,UAAU,EAAE,CAAC,MAAM,CAAC;AACxB,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC;AACjB,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC;AACjB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC;AACf,IAAI,GAAG,EAAE;AACT,MAAM,MAAM;AACZ,MAAM,QAAQ;AACd,MAAM,eAAe;AACrB,MAAM,WAAW;AACjB,MAAM,QAAQ;AACd,MAAM,OAAO;AACb,MAAM,KAAK;AACX,MAAM,iBAAiB;AACvB,MAAM,YAAY;AAClB,MAAM,WAAW;AACjB,MAAM,gBAAgB;AACtB,MAAM,MAAM;AACZ,MAAM,QAAQ;AACd,MAAM,aAAa;AACnB,MAAM,aAAa;AACnB,MAAM,MAAM;AACZ,MAAM,SAAS;AACf,MAAM,SAAS;AACf,MAAM,SAAS;AACf,MAAM,OAAO;AACb,MAAM,MAAM;AACZ,MAAM,SAAS;AACf,MAAM,OAAO;AACb,MAAM,SAAS;AACf,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,KAAK;AACX,MAAM,UAAU;AAChB,MAAM,SAAS;AACf,MAAM,SAAS;AACf,MAAM,OAAO;AACb,MAAM,SAAS;AACf,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,QAAQ;AACd,MAAM,OAAO;AACb,MAAM,IAAI;AACV,MAAM,OAAO;AACb,MAAM,MAAM;AACZ,MAAM,WAAW;AACjB,MAAM,OAAO;AACb,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,MAAM;AACZ,MAAM,QAAQ;AACd,MAAM,SAAS;AACf,MAAM,QAAQ;AACd,MAAM,MAAM;AACZ,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,KAAK;AACX,MAAM,KAAK;AACX,MAAM,MAAM;AACZ,MAAM,SAAS;AACf,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,UAAU;AAChB,MAAM,OAAO;AACb,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,OAAO;AACb,MAAM,SAAS;AACf,MAAM,UAAU;AAChB,MAAM,QAAQ;AACd,MAAM,OAAO;AACb,MAAM,MAAM;AACZ,MAAM,QAAQ;AACd,MAAM,QAAQ;AACd,MAAM,OAAO;AACb,MAAM,QAAQ;AACd,MAAM,OAAO;AACb,MAAM,UAAU;AAChB,KAAK;AACL,GAAG;AACH,EAAE,QAAQ,EAAE;AACZ,IAAI,KAAK,EAAE;AACX,MAAM,IAAI,EAAE,UAAU;AACtB,MAAM,QAAQ,EAAE,IAAI;AACpB,KAAK;AACL,GAAG;AACH;;AC9KA,MAAM2E,YAAY,GAAWC,aAAa,CAAA;AAE1CD,YAAY,CAACE,QAAQ,CAACR,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA;AAE7C;AACAM,YAAY,CAACG,UAAU,CAAC,GAAG,CAAC,CAACT,IAAI,CAAC,WAAW,CAAC,CAAA;AAE9C;AACAM,YAAY,CAACG,UAAU,CAACC,GAAG,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;AACpDJ,YAAY,CAACG,UAAU,CAACE,UAAU,GAAG,CAAC,QAAQ,CAAC,CAAA;AAC/CL,YAAY,CAACG,UAAU,CAAC9G,GAAG,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,CAAA;AAC/E2G,YAAY,CAACG,UAAU,CAACzF,KAAK,GAAG,CAC9B,QAAQ,EACR,UAAU,EACV,SAAS,EACT,aAAa,EACb,UAAU,EACV,OAAO,EACP,MAAM,CACP,CAAA;AACDsF,YAAY,CAACG,UAAU,CAACG,MAAM,GAAG,CAAC,KAAK,CAAC;;ACfxC;AACA,MAAMC,YAAY,GAAGhF,2BAAO,EAAE,CAC3BC,GAAG,CAACgF,yBAAK,CAAA;AACV;AAAA,CACChF,GAAG,CAAkBiF,4BAAQ,EAAEC,YAAM,CAAC,CACtClF,GAAG,CAACmF,YAAM,CAAC,CACXC,MAAM,EAAE,CAAA;AAEI,eAAeC,SAAS,CAACtL,IAAI,EAAEyH,OAAO,EAAA;EACnD,IAAI;IACF,MAAM1B,SAAS,GAAGiF,YAAY,EAAE,CAAC/E,GAAG,CAAC3E,WAAK,EAAEmG,OAAO,CAAC,CAAA;IACpD,MAAMhB,IAAI,GAAG,MAAMV,SAAS,CAACnH,OAAO,CAACoB,IAAI,CAAC,CAAA;IAC1C,OAAOyG,IAAI,CAACC,MAAM,CAAA;GACnB,CAAC,OAAOnC,KAAK,EAAE;AACd;AACAD,IAAAA,OAAO,CAACC,KAAK,EAAuBA,mBAAAA,EAAAA,KAAK,EAAE,CAAC,CAAA;AAC5C,IAAA,MAAMA,KAAK,CAAA;AACZ,GAAA;AACH;;ACnBA,MAAMgH,OAAO,CAAA;AAAA,EAAA,WAAA,GAAA;AAAA,IAAA,IAAA,CACX/B,OAAO,GAAG,IAAIgC,iCAAa,EAAE,CAAA;IAAA,IAC7BC,CAAAA,GAAG,GAAG,EAAE,CAAA;AAAA,GAAA;EAERvM,GAAG,CAACa,EAAE,EAAA;IACJ,OAAO,IAAI,CAAC0L,GAAG,CAACC,MAAM,CAAC3L,EAAE,CAAC,CAAC,CAAA;AAC7B,GAAA;AAEA8H,EAAAA,GAAG,CAACnD,IAAI,EAAE0E,KAAK,EAAA;AACb,IAAA,OAAO,IAAI,CAACqC,GAAG,CAACtB,IAAI,CAAC;MAAEzF,IAAI;AAAE0E,MAAAA,KAAAA;KAAO,CAAC,GAAG,CAAC,CAAA;AAC3C,GAAA;AACD,CAAA;AAEM,eAAexB,aAAa,CAAC1H,OAAe,EAAA;AACjD,EAAA,MAAMyL,SAAS,GAAG,MAAM7L,cAAc,CAACI,OAAO,CAAC,CAAA;AAC/C,EAAA,MAAMoB,KAAK,GAAGqK,SAAS,IAAI/G,YAAY,CAAC+G,SAAS,CAAC,CAAA;AAElD,EAAA,IAAI,CAACrK,KAAK,EAAE,OAAO,IAAI,CAAA;AAEvB,EAAA,MAAMmG,OAAO,GAAG,IAAI8D,OAAO,EAAE,CAAA;EAC7B,MAAMvL,IAAI,GAAG,MAAMwI,YAAY,CAAClH,KAAK,EAAEmG,OAAO,CAAC,CAAA;EAC/C,MAAME,GAAG,GAAG,MAAM2D,SAAS,CAACtL,IAAI,EAAEyH,OAAO,CAAC,CAAA;AAE1C,EAAA,OAAOE,GAAG,CAAA;AACZ;;;;"}